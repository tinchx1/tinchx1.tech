---
import ThemeToggle from "./ThemeToggle.astro";
import * as m from "../paraglide/messages.js";
const locale = Astro.url.toString().split("/")[1];
const navItems = [
  {
    title: m.home_header_experiencia_title(),
    label: m.home_header_experiencia_label(),
    url: `${locale}#experiencia`,
  },
  {
    title: m.home_header_proyectos_title(),
    label: m.home_header_proyectos_label(),
    url: `${locale}#proyectos`,
  },
  {
    title: m.home_header_sobre_mi_title(),
    label: m.home_header_sobre_mi_label(),
    url: `${locale}#sobre-mi`,
  },
];
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-cyan-500 dark:hover:text-cyan-500"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <select
      id="locale-select"
      class="relative bg-transparent block px-1 py-2 outline-none transition hover:text-cyan-500 dark:hover:text-cyan-500"
      onchange="changeLocale(this.value)"
    >
      <option value="es">ES</option>
      <option value="eng">EN</option>
    </select>
    <ThemeToggle />
  </nav>
</header>

<script>
  declare global {
    interface Window {
      changeLocale: (value: string) => void;
    }
  }

  window.changeLocale = function (value: string) {
    const currentUrl = window.location.pathname;
    const pathParts = currentUrl.split("/").filter(Boolean);

    if (
      pathParts.length > 0 &&
      (pathParts[0] === "es" || pathParts[0] === "eng")
    ) {
      pathParts[0] = value; // Reemplaza el locale
    } else {
      pathParts.unshift(value); // Añade el locale al principio si no está presente
    }

    const newPath = `/${pathParts.join("/")}${window.location.search}${window.location.hash}`;
    window.location.href = newPath;
  };
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-cyan-500");
            } else {
              item.classList.remove("text-cyan-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
  document.addEventListener("astro:page-load", () => {
    const selectElement = document.getElementById(
      "locale-select",
    ) as HTMLSelectElement;
    if (selectElement) {
      selectElement.value = window.location.pathname.split("/")[1];
    }
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
    }
  }
</style>
